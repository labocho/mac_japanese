require "csv"

ROOT_DIR = File.expand_path "#{File.dirname(__FILE__)}/../"

def pua?(four_hex_with_0x)
  case four_hex_with_0x
  when *%w{0xF860 0xF861 0xF862 0xF87A 0xF87E 0xF87F}
    true
  else
    false
  end
end

def make_pairs(use_pua = true)
  # pair of string literals
  pairs = []
  # Control characters
  pairs += (0x00..0x1f).map do |ctrl|
    hex = ctrl.to_s(16).upcase
    ["\\x#{hex.rjust(2, "0")}", "\\u{#{hex.rjust(4, "0")}}"]
  end
  open("#{ROOT_DIR}/src/JAPANESE.txt") do |f|
    f.lines.each do |line|
      next if line =~ /^#/
      next unless line =~ /^(0x.+)\t(0x.+)\t/
      macjp_hex, unicode_hex = $~.captures

      macjp = macjp_hex[2..-1].chars.each_slice(2).map{|hex| "\\x" + hex.join}.join

      unicode = unicode_hex.split("+").map{|hex|
        next "" if !use_pua && pua?(hex)
        "\\u{#{hex[2..-1]}}"
      }.join

      pairs.push [macjp, unicode]
    end
  end
  pairs
end

open("#{ROOT_DIR}/lib/mac_japanese/mac_japanese_to_utf8_with_pua.rb", "w") do |f|
  f.puts <<-EOS
# This file was automatically generated by src/parse.rb.
# Cannot modify directly.
module MacJapanese
  MAC_JAPANESE_TO_UTF8_WITH_PUA = Hash[
    [
#{make_pairs.map{|m, u| %{      ["#{m}", "#{u}"]}}.join(",\n")}
    ].each{|m, u| m.force_encoding(Encoding::MacJapanese)}
  ]
end
EOS
end

open("#{ROOT_DIR}/lib/mac_japanese/mac_japanese_to_utf8_without_pua.rb", "w") do |f|
  f.puts <<-EOS
# This file was automatically generated by src/parse.rb.
# Cannot modify directly.
module MacJapanese
  MAC_JAPANESE_TO_UTF8_WITHOUT_PUA = Hash[
    [
#{make_pairs(false).map{|m, u| %{      ["#{m}", "#{u}"]}}.join(",\n")}
    ].each{|m, u| m.force_encoding(Encoding::MacJapanese)}
  ]
end
EOS
end

open("#{ROOT_DIR}/lib/mac_japanese/utf8_to_mac_japanese.rb", "w") do |f|
  f.puts <<-EOS
# This file was automatically generated by src/parse.rb.
# Cannot modify directly.
module MacJapanese
  UTF8_TO_MAC_JAPANESE = Hash[
    [
#{make_pairs.map{|m, u| %{      ["#{u}", "#{m}"]}}.join(",\n")}
    ].each{|u, m| m.force_encoding(Encoding::MacJapanese)}
  ]
end
EOS
end
